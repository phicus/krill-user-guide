import{_ as i,a as r,b as n,c as t,d as l,e as p,f as d}from"./admin-users-realm-515b9a61.js";import{_ as c,L as u,n as m,p as g,Q as e,s,M as v,a0 as o}from"./framework-e30e40a0.js";const _={},f=e("p",null,[e("strong",null,[s("Crear un usuario para Krill a través del panel de "),e("code",null,"/admin")])],-1),h=e("p",null,"Accedemos al panel de admin:",-1),C={href:"https://XXX.phicus.es/admin",target:"_blank",rel:"noopener noreferrer"},P=e("strong",null,"Krill",-1),E=e("p",null,[e("img",{src:i,alt:""})],-1),q=o('<li><p>Una vez dentro veremos este panel:</p><p><img src="'+r+'" alt=""></p></li><li><p>Nos dirigimos a Users, donde podremos ver todos los usuarios que tenemos creados:</p><p><img src="'+n+'" alt=""></p></li><li><p>Arriba a la derecha podemos añadir un nuevo usuario mediante “Add User”:</p><p><img src="'+t+'" alt=""></p><p>Nos aparece esta pantalla, donde debemos ingresar el Usuario y la contraseña 2 veces.</p></li><li><p>Una vez hayamos creado el usuario podremos administrar los permisos:</p><p><img src="'+l+'" alt=""></p></li><li><p>Posteriormente a esto debemos de otorgarle los permisos al realm correspondiente, ya que la red puede estar dividida en realms, y cada uno de estos tiene una visibilidad distinta.</p><p>Vamos a partir de que el realm a modificar es el principal y por defecto, llamado “cpe”:</p><p><img src="'+p+'" alt=""></p></li>',5),y=o('<p>Una vez veamos esta imagen, debemos entrar dentro del propio realm, en este caso pulsándole al “1”, para poder administrar los distintos usuarios que tengan acceso al realm:</p><p><img src="'+d+'" alt=""></p><p>Aquí ya se podría insertar los distintos usuarios que tengan permiso para ver el Realm CPE. El funcionamiento para cualquier realm sería exactamente igual.</p><p><strong>Explicación de Grupos y Permisos en el Panel de Administración</strong></p><p><strong>Grupos</strong></p><p><strong>APP</strong></p><p>Las aplicaciones son módulos específicos dentro de tu sistema que ofrecen diferentes funcionalidades. Cada aplicación maneja una parte particular del sistema.</p><div class="custom-container tip"><p class="custom-container-title">Ejemplo</p><ul><li><strong>APP inventory</strong>: Gestiona todo lo relacionado con el inventario, como productos, stock y entradas/salidas de mercancías.</li><li><strong>APP voip</strong>: Maneja los servicios de VoIP (Voice over IP), gestionando llamadas y comunicaciones de voz a través de Internet.</li></ul></div><p><strong>HG (Host Groups)</strong></p><p>Los grupos de host son colecciones de dispositivos o servicios que se gestionan juntos. Estos grupos permiten organizar y monitorear diferentes componentes de la infraestructura.</p><div class="custom-container tip"><p class="custom-container-title">Ejemplo</p><ul><li><strong>HG CORE Servers</strong>: Incluye todos los servidores principales del sistema, esenciales para el funcionamiento de la red y servicios.</li><li><strong>HG CORE Router</strong>: Agrupa todos los routers centrales, cruciales para la gestión del tráfico de datos.</li></ul></div><p><strong>Realm</strong></p><p>Los &#39;realms&#39; son dominios específicos dentro del sistema que agrupan dispositivos o servicios similares, facilitando su gestión y monitoreo.</p><div class="custom-container tip"><p class="custom-container-title">Ejemplo</p><ul><li><strong>realm:cpeethernet</strong>: Se refiere al dominio de dispositivos CPE (Customer Premises Equipment) que utilizan tecnología Ethernet.</li><li><strong>realm:swtdocsis</strong>: Incluye dispositivos del Realm: SWT que utilizan la tecnología DOCSIS para transmisión de datos sobre cable coaxial.</li></ul></div><p><strong>Permisos</strong></p><p><strong>Estructura de Permisos</strong></p><p>Cada permiso se presenta en el formato &#39;aplicación | modelo | acción&#39;.</p><ul><li><strong>Aplicación</strong>: La parte del sistema donde se aplica el permiso (ej. account, admin).</li><li><strong>Modelo</strong>: El tipo de datos o entidad sobre la que se aplica el permiso (ej. email address, user).</li><li><strong>Acción</strong>: La operación que se permite realizar, como añadir (add), cambiar (change), eliminar (delete) o ver (view).</li></ul><p><strong>Ejemplos de Permisos</strong></p><ul><li><strong>account | email address | Can add email address</strong>: Permite al usuario añadir una nueva dirección de correo electrónico en la aplicación de cuentas.</li><li><strong>auth | user | Can change user</strong>: Permite al usuario modificar los datos de otros usuarios en la aplicación de autenticación.</li><li><strong>icingadb | hostgroup | Can monitor CORE Servers</strong>: Permite al usuario monitorear los servidores centrales en el grupo de hosts CORE.</li><li><strong>isp | Customer | Can view Customer</strong>: Permite al usuario ver los datos de los clientes en la aplicación ISP (Proveedor de Servicios de Internet).</li></ul><p><strong>Funcionamiento</strong></p><p><strong>Asignación de Permisos</strong></p><p>Cada usuario en tu sistema puede tener asignados varios permisos. Estos permisos determinan qué acciones pueden realizar dentro de las aplicaciones específicas del sistema.<br> - Ejemplo: Un usuario con el permiso &#39;Can view email address&#39; puede ver las direcciones de correo, pero no modificarlas ni eliminarlas.</p><p><strong>Grupos de Usuarios</strong></p><p>Los usuarios pueden ser agrupados en &#39;Grupos&#39; que tienen un conjunto común de permisos. Esto facilita la gestión de permisos para múltiples usuarios que necesitan los mismos accesos. En lugar de asignar permisos individualmente a cada usuario, se asignan a un grupo, y los usuarios se añaden a este grupo.</p><div class="custom-container tip"><p class="custom-container-title">Ejemplo</p><ul><li><strong>Grupo Soporte</strong>: Podría tener permisos como &#39;Can view Customer&#39; y &#39;Can view isp&#39;. Todos los usuarios en el grupo Soporte heredarán estos permisos.</li><li><strong>Grupo Administradores</strong>: Tendría permisos más amplios, como &#39;Can add user&#39;, &#39;Can delete user&#39;, &#39;Can view all data&#39;, permitiendo una gestión completa del sistema.</li></ul></div>',26);function b(A,j){const a=u("ExternalLinkIcon");return m(),g("div",null,[f,e("ol",null,[e("li",null,[h,e("p",null,[s("Para ello debemos de acceder a "),e("a",C,[s("https://XXX.phicus.es/admin"),v(a)]),s(" con las credenciales que usamos habitualmente para "),P,s(".")]),E]),q]),y])}const I=c(_,[["render",b],["__file","create-users.html.vue"]]);export{I as default};
